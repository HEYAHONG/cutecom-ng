import QtQuick 2.0
import QtQuick.Controls 1.2
import QtQuick.Dialogs 1.1



Item {
    width: 800
    height: 600
    id:m_dialog



    MessageDialog {
            id: m_messageDialog
            visible: false
            modality: Qt.WindowModal
    }

    TextArea {
        width:parent.width
        height: parent.height-100
        id:m_output
        focus: false
        readOnly: true
    }
    TextEdit {
        x:0
        y:parent.height-100
        width:parent.width
        height: 60
        id:m_input
        focus: true
        readOnly: false

    }
    Button {
        x:0
        y:parent.height-40
        width:parent.width
        height: 40
        text: "发送"
        onClicked: {
            /*
             × 串口发送
            */
            if(!cutecomng.SendSerialData(m_input.text))
            {
                m_messageDialog.title="错误"
                m_messageDialog.text="发送失败。必须在串口打开时才能发送数据"
                m_messageDialog.open()
            }
        }
    }


    /*
     *属性名称：pluginname
     *属性说明: 插件名称。必须存在，否则将不判定为插件。
    */
    property string pluginname:"template"
    /*
     *属性名称：pluginversion
     *属性说明: 插件版本。可选。
    */
    property string pluginversion:"1.0.0"

    function timercallback()
    {
        /*
        *设置的定时器回调，当定时器超时由C++调用
        */
        console.log("timer timeout");
        if(cutecomng.IsSerialOpen())
        {
            console.log("serial open");
        }
    }

    function serialdatacallback(data)
    {
        /*
        *设置的串口回调，当串口有数据时由C++调用
        */
        console.log(data);
        {
            //接收数据放入textarea

            var maxlength=1000000;//最大长度
            m_output.text+=data;
            m_output.cursorPosition=m_output.length-1;
            if(m_output.length>maxlength)
            {
                //数据超过一定数量
                m_output.text=m_output.text.substring(m_output.length-maxlength);
                m_output.cursorPosition=m_output.length-1;
            }
        }

    }

    /*
     *说明:插件初始化。当插件被加载时由C++调用。必须存在。
     */
    function onplugininit()
    {
        //在此处初始化插件
        console.log("template plugin init");

        //打印Qt版本
        console.log("Qt Version:",cutecomng.QtVersion)

        //启动定时器(60000毫秒一次)
        cutecomng.SetTimerCallback(timercallback)
        cutecomng.StartTimer(60000)

        //设置串口回调
        cutecomng.SetSerialDataCallback(serialdatacallback)
    }
    /*
     *说明:插件反初始化。当插件被卸载时由C++调用(并非窗口被关闭)。必须存在。
     */
    function onplugindeinit()
    {
        //在此处反初始化插件
        console.log("template plugin deinit");

        //停止定时器
        cutecomng.StopTimer();
    }

}
