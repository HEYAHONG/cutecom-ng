set(QT_VERSION "@USE_QT_VERSION@")
set(BUILD_TYPE "@CMAKE_BUILD_TYPE@")
set(DUMMYQMLDIR "@DUMMYQMLDIR@")

if(BUILD_TYPE STREQUAL "Release")
message(NOTICE "program is  a ${BUILD_TYPE} build")
set(WINDEPLOYQT_FLAGS "${WINDEPLOYQT_FLAGS}  --release")
endif()
if(BUILD_TYPE STREQUAL "Debug")
message(NOTICE "program is  a ${BUILD_TYPE} build")
set(WINDEPLOYQT_FLAGS "${WINDEPLOYQT_FLAGS}  --debug")
endif()
set(WINDEPLOYQT_FLAGS "${WINDEPLOYQT_FLAGS} --force  --compiler-runtime")

#使用windeployqt添加依赖
if(QT_VERSION EQUAL "5")
	message(NOTICE "Qt version ${QT_VERSION}")
	find_program(WINDEPLOYQT NAMES windeployqt)
elseif(QT_VERSION EQUAL "6")
	message(NOTICE "Qt version ${QT_VERSION}")
	find_program(WINDEPLOYQT NAMES windeployqt-qt6 windeployqt)
else()
	message(WARNING "Qt version is unkown.")
	find_program(WINDEPLOYQT NAMES windeployqt windeployqt-qt6)
endif()
if(NOT WINDEPLOYQT-NOTFOUND)
	set(WINDEPLOYQT_CMD "${WINDEPLOYQT} ${WINDEPLOYQT_FLAGS} --qmldir ${DUMMYQMLDIR}  ${CMAKE_INSTALL_PREFIX}/bin/")
	message(NOTICE "WINDEPLOYQT Command is ${WINDEPLOYQT_CMD}")
	execute_process(COMMAND  "cmd.exe" /c "${WINDEPLOYQT_CMD}")
else()
	message(WARNING "windeployqt(qt${QT_VERSION}) is not found.package maybe invalid.")
endif()
